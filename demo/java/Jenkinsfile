def label = "pipeline-worker"
podTemplate(label: label, cloud: 'kubernetes', 
  containers: [
    containerTemplate(name: 'jnlp',
      ttyEnabled: true,
      image: 'jenkins/jnlp-slave:alpine'),
    containerTemplate(name: 'maven',
      ttyEnabled: true,
      command: 'cat',
      image: '100.100.0.13/devops/maven:jdk8-alpine'),
    containerTemplate(name: 'docker',
      ttyEnabled: true,
      command: 'cat',
      image: 'docker:1.13.0')
  ],
  volumes: [
    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath:'/var/run/docker.sock'),
    hostPathVolume(hostPath: '/etc/docker/daemon.json', mountPath:'/etc/docker/daemon.json'),
    nfsVolume(mountPath: '/root/.m2/repository', serverAddress: '100.100.0.10', serverPath: '/nfsdata/maven')
  ]) {

  node(label) {

    stage('Prepare') {
      container('jnlp') {
        sh 'sleep 10'
        git 'https://github.com/flyinghawkren/devops-plat.git'
      }
    }

    stage('Build') {
      container('maven') {
        sh 'cd demo/java && mvn -Dmaven.test.skip=true clean package'
      }
    }

    stage('SonarCheck') {
      container('maven') {
        sh 'cd demo/java && mvn sonar:sonar -Dsonar.projectKey=java-web-test -Dsonar.host.url=http://100.100.0.13:9000 -Dsonar.login=50714ff191af11806fb9fc3c61117de1cf12dbf3'
      }
    }

    stage('UT') {
      container('maven') {
        sh 'cd demo/java && mvn test'
        jacoco classPattern: 'demo/java/target/classes', execPattern: 'demo/java/target/**.exec', sourcePattern: 'demo/java/src/main/java'
      }
    }
  
    stage('PushImage') {
      container('docker') {
        sh 'cd demo/java && docker build -t 100.100.0.13/app/demo-java:1.0 .'
        // withCredentials([usernamePassword(credentialsId: 'd23f551a-1e55-4bea-a9fb-5098a9ac291d',
        //   passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
        //   sh "docker login http://100.100.0.13 -u $USERNAME -p $PASSWORD"
        // }
        sh 'docker login -u admin -p Harbor12345 http://100.100.0.13'
        sh 'docker push 100.100.0.13/app/demo-java:1.0'
      }
    }
  }
}


podTemplate(label: label, cloud: 'kubernetes', 
  containers: [
    containerTemplate(name: 'jnlp',
      ttyEnabled: true,
      image: 'jenkins/jnlp-slave:alpine'),
    containerTemplate(name: 'jmeter',
      ttyEnabled: true,
      image: 'justb4/jmeter:5.1.1',
      command: 'cat')
  ]) {

  node(label) {
    stage('DeployPrepare') {
      container('jnlp') {
        sh 'sleep 10'
        git 'https://github.com/flyinghawkren/devops-plat.git'
        sh '''sed -ie "s/BUILD_NUMBER/${BUILD_NUMBER}/g" demo/java/deployment.yaml'''
      }
    }
    stage('DeployToK8s'){
      kubernetesDeploy(
      kubeconfigId: 'k8sconfig',
      configs: 'demo/java/deployment.yaml',
      enableConfigSubstitution: true)
    }

    stage('ST') {
      sleep 10
      container('jmeter') {
        sh 'mkdir -p demo/java/test/report && jmeter -n -t demo/java/test/helloworld.jmx -l demo/java/test/report/result.jtl -e -o demo/java/test/report'
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'demo/java/test/report', reportFiles: 'index.html', reportName: 'Jmeter Report', reportTitles: ''])
      }
    }
  }
}
